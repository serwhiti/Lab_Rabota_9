# Написать реализацию игры «Блэкджек». Блэкджек также известен как 21. Суть игры проста:
# либо набрать ровно 21 очко либо набрать очков больше, чем в руках у дилера, но ни в коем случае не больше 21. 
# Если игрок собирает больше 21, он «сгорает». В случае ничьей игрок и дилер остаются при своих.
# Карты имеют такие “ценовые” значения:
# - от двойки до десятки — от 2 до 10 соответственно
# - у туза — 1 или 11 (11 пока общая сумма не больше 21, далее 1)
# - у “картинок” (король, дама, валет) — 10
# Напишите программу, которая в начале случайным образом выдаёт пользователю и компьютеру по две карты и затем запрашивает у пользователя действие:
# взять карту или остановиться. На экран должна выдаваться информация о руке пользователя. После того, как игрок останавливается, выведите на экран победителя.

import random

class Card:
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit
        
    def value(self):
        if self.rank in ["J", "Q", "K"]:
            return 10
        elif self.rank == "A":
            return 11
        else:
            return int(self.rank)
            
    def __str__(self):
        return f"{self.rank}{self.suit}"
class Deck:
    def __init__(self):
        ranks = [str(i) for i in range(2, 11)] + ["J", "Q", "K", "A"]
        suits = ["♥", "♦", "♣", "♠"]
        self.cards = [Card(rank, suit) for rank in ranks for suit in suits]
        random.shuffle(self.cards)
        self.dealt_cards = []

    def deal(self):
        card = self.cards.pop()
        self.dealt_cards.append(card)
        return card

    def shuffle(self):
        self.cards.extend(self.dealt_cards)
        self.dealt_cards = []
        random.shuffle(self.cards)
class Player:
    def __init__(self, name):
        self.name = name
        self.hand = []

    def add_card(self, card):
        self.hand.append(card)

    def total(self):
        total = sum([card.value() for card in self.hand])
        aces = sum([1 for card in self.hand if card.rank == "A"])
        while total > 21 and aces > 0:
            total -= 10
            aces -= 1
        return total

    def __str__(self):
        return f"{self.name} ({', '.join([str(card) for card in self.hand])}): {self.total()}"

deck = Deck()
player = Player("Игрок")
dealer = Player("Дилер")

player.add_card(deck.deal())
player.add_card(deck.deal())
dealer.add_card(deck.deal())
dealer.add_card(deck.deal())
print(player)
print(dealer)
while True:
    action = input("взять или пасс? ")
    if action.lower() == "взять":
        player.add_card(deck.deal())
        print(player)
        if player.total() > 21:
            print("Перебор! Ты проиграл.")
            break
    elif action.lower() == "пасс":
        break

  if player.total() <= 21:
    while dealer.total() < 17:
      dealer.add_card(deck.deal())
      print(dealer)

    print(player)
    print(dealer)

    if dealer.total() > 21 or dealer.total() < player.total():
        print("Ты выиграл!")
    elif dealer.total() > player.total():
        print("Дилер выиграл!")
    else:
        print("Ничья!")
